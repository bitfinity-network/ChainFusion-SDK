type AccessListItem = record { storageKeys : vec text; address : text };
type BasicAccount = record { balance : text; nonce : text };
type Block = record {
  miner : text;
  totalDifficulty : text;
  receiptsRoot : text;
  stateRoot : text;
  hash : text;
  difficulty : text;
  size : opt text;
  uncles : vec text;
  baseFeePerGas : opt text;
  extraData : text;
  sealFields : vec text;
  transactionsRoot : text;
  sha3Uncles : text;
  nonce : text;
  number : text;
  timestamp : text;
  transactions : vec text;
  gasLimit : text;
  logsBloom : text;
  parentHash : text;
  gasUsed : text;
  mixHash : text;
};
type BlockResult = variant {
  NoBlockFound;
  WithHash : Block;
  WithTransaction : Block_1;
};
type Block_1 = record {
  miner : text;
  totalDifficulty : text;
  receiptsRoot : text;
  stateRoot : text;
  hash : text;
  difficulty : text;
  size : opt text;
  uncles : vec text;
  baseFeePerGas : opt text;
  extraData : text;
  sealFields : vec text;
  transactionsRoot : text;
  sha3Uncles : text;
  nonce : text;
  number : text;
  timestamp : text;
  transactions : vec Transaction;
  gasLimit : text;
  logsBloom : text;
  parentHash : text;
  gasUsed : text;
  mixHash : text;
};
type BlockchainStorageLimits = record {
  receipts_bytes_limit : nat64;
  blocks_and_transactions_bytes_limit : nat64;
};
type BuildData = record {
  rustc_semver : text;
  git_branch : text;
  pkg_version : text;
  cargo_target_triple : text;
  cargo_debug : text;
  pkg_name : text;
  cargo_features : text;
  build_timestamp : text;
  git_sha : text;
  git_commit_timestamp : text;
};
type Duration = record { secs : nat64; nanos : nat32 };
type EstimateGasRequest = record {
  to : opt text;
  gas : opt text;
  maxFeePerGas : opt text;
  gasPrice : opt text;
  value : opt text;
  data : opt text;
  from : opt text;
  accessList : opt vec AccessListItem;
  nonce : opt text;
  maxPriorityFeePerGas : opt text;
  chainId : opt text;
};
type EvmCanisterInitData = record {
  permissions : opt vec record { principal; vec Permission };
  owner : principal;
  min_gas_price : nat;
  chain_id : nat64;
  signature_verification_principal : principal;
  reserve_memory_pages : opt nat64;
  genesis_accounts : vec record { text; opt text };
  coinbase : text;
  transaction_processing_interval : opt Duration;
  log_settings : opt LogSettings;
};
type EvmError = variant {
  Internal : text;
  TransactionSignature : text;
  StableStorageError : text;
  InsufficientBalance : record { actual : text; expected : text };
  TransactionPool : TransactionPoolError;
  NotAuthorized;
  AnonymousPrincipal;
  GasTooLow : record { minimum : text };
  BlockDoesNotExist : text;
  NoHistoryDataForBlock : text;
  TransactionReverted : text;
  InvalidGasPrice : text;
  NotProcessableTransactionError : HaltError;
  ReservationFailed : text;
  BadRequest : text;
  FatalEvmExecutorError : ExitFatal;
};
type EvmStats = record {
  block_number : nat64;
  cycles : nat;
  chain_id : nat64;
  pending_transactions : vec text;
  pending_transactions_count : nat64;
  block_gas_limit : nat64;
  state_root : text;
};
type ExeResult = variant {
  Halt : record { error : HaltError; gas_used : text };
  Revert : record { output : text; revert_message : opt text; gas_used : text };
  Success : record {
    output : TransactOut;
    logs : vec TransactionExecutionLog;
    gas_used : text;
    logs_bloom : text;
  };
};
type ExitFatal = variant {
  UnhandledInterrupt;
  NotSupported;
  Other : text;
  CallErrorAsFatal : HaltError;
};
type FeeHistory = record {
  reward : opt vec vec text;
  base_fee_per_gas : vec text;
  oldest_block : text;
  gas_used_ratio : vec float64;
};
type FullStorageValue = record {
  data : vec nat8;
  ref_count : nat32;
  removed_at_block : nat64;
};
type HaltError = variant {
  DesignatedInvalid;
  OutOfOffset;
  Continue;
  PriorityFeeGreaterThanMaxFee;
  CallGasCostMoreThanGasLimit;
  InvalidChainId;
  Revert : opt text;
  InvalidRange;
  CreateContractLimit;
  CallerGasLimitMoreThanBlock;
  InvalidOpcode;
  StateChangeDuringStaticCall;
  LackOfFundForMaxFee : record { fee : nat64; balance : text };
  CreateEmpty;
  InvalidCode : nat8;
  GasPriceLessThanBasefee;
  InvalidJump;
  OutOfFund;
  NonceTooLow : record { tx : nat64; state : nat64 };
  PrecompileError;
  OpcodeNotFound;
  NotActivated;
  PCUnderflow;
  OverflowPayment;
  PrevrandaoNotSet;
  OutOfGas;
  Other : text;
  CallNotAllowedInsideStatic;
  NonceTooHigh : record { tx : nat64; state : nat64 };
  RejectCallerWithCode;
  CallTooDeep;
  NonceOverflow;
  FatalExternalError;
  CreateContractWithEF;
  CreateCollision;
  StackOverflow;
  CreateInitcodeSizeLimit;
  StackUnderflow;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  upgrade : opt bool;
  status_code : nat16;
};
type Indices = record { history_size : nat64; pending_block : nat64 };
type Interval = variant {
  PerHour;
  PerWeek;
  PerDay;
  Period : record { seconds : nat64 };
  PerMinute;
};
type Log = record { log : text; offset : nat64 };
type LogSettings = record {
  log_filter : opt text;
  in_memory_records : opt nat64;
  enable_console : bool;
};
type Logs = record { logs : vec Log; all_logs_count : nat64 };
type MetricsData = record {
  stable_memory_size : nat64;
  cycles : nat64;
  heap_memory_size : nat64;
};
type MetricsMap = record {
  map : vec record { nat64; MetricsData };
  interval : Interval;
  history_length_nanos : nat64;
};
type MetricsStorage = record { metrics : MetricsMap };
type Permission = variant {
  ReadLogs;
  Admin;
  UpdateLogsConfiguration;
  UpdateBlockchain;
};
type PermissionList = record { permissions : vec Permission };
type Result = variant { Ok; Err : EvmError };
type Result_1 = variant { Ok : PermissionList; Err : EvmError };
type Result_10 = variant { Ok : vec record { nat64; text }; Err : EvmError };
type Result_11 = variant { Ok : vec record { text; nat }; Err : EvmError };
type Result_12 = variant { Ok : Logs; Err : EvmError };
type Result_13 = variant { Ok : EvmStats; Err : EvmError };
type Result_14 = variant { Ok : record { text; text }; Err : EvmError };
type Result_15 = variant { Ok : nat64; Err : EvmError };
type Result_2 = variant { Ok : text; Err : EvmError };
type Result_3 = variant { Ok : text; Err : EvmError };
type Result_4 = variant { Ok : FeeHistory; Err : EvmError };
type Result_5 = variant { Ok : BlockResult; Err : EvmError };
type Result_6 = variant { Ok : nat64; Err : EvmError };
type Result_7 = variant { Ok : vec BlockResult; Err : EvmError };
type Result_8 = variant { Ok : opt Transaction; Err : EvmError };
type Result_9 = variant { Ok : opt TransactionReceipt; Err : EvmError };
type StateUpdateAction = variant {
  Replace : record { key : record { nat64; text }; value : null };
  Removed : record { key : record { nat64; text } };
};
type StateUpdateAction_1 = variant {
  Replace : record { key : text; value : FullStorageValue };
  Removed : record { key : text };
};
type StorableExecutionResult = record {
  to : opt text;
  transaction_hash : text;
  transaction_type : opt text;
  block_hash : text;
  max_priority_fee_per_gas : opt text;
  from : text;
  transaction_index : text;
  max_fee_per_gas : opt text;
  block_number : text;
  cumulative_gas_used : text;
  timestamp : nat64;
  exe_result : ExeResult;
  gas_price : opt text;
};
type TransactOut = variant {
  Call : vec nat8;
  None;
  Create : record { vec nat8; opt text };
};
type Transaction = record {
  r : text;
  s : text;
  v : text;
  to : opt text;
  gas : text;
  maxFeePerGas : opt text;
  gasPrice : opt text;
  value : text;
  blockNumber : opt text;
  from : text;
  hash : text;
  blockHash : opt text;
  "type" : opt text;
  accessList : opt vec AccessListItem;
  transactionIndex : opt text;
  nonce : text;
  maxPriorityFeePerGas : opt text;
  input : text;
  chainId : opt text;
};
type TransactionExecutionLog = record {
  data : text;
  topics : vec text;
  address : text;
};
type TransactionPoolError = variant {
  InvalidNonce : record { actual : text; expected : text };
  TransactionAlreadyExists;
  TxReplacementUnderpriced;
  TooManyTransactions;
};
type TransactionReceipt = record {
  to : opt text;
  status : opt text;
  output : opt vec nat8;
  transactionHash : text;
  cumulativeGasUsed : text;
  blockNumber : text;
  from : text;
  logs : vec TransactionReceiptLog;
  blockHash : text;
  root : opt text;
  "type" : opt text;
  transactionIndex : text;
  effectiveGasPrice : opt text;
  logsBloom : text;
  contractAddress : opt text;
  gasUsed : opt text;
};
type TransactionReceiptLog = record {
  transactionHash : text;
  blockNumber : text;
  data : text;
  blockHash : text;
  transactionIndex : text;
  topics : vec text;
  address : text;
  logIndex : text;
  removed : bool;
};
service : (EvmCanisterInitData) -> {
  get_curr_metrics : () -> (MetricsData) query;
  get_metrics : () -> (MetricsStorage) query;
  account_basic : (text) -> (BasicAccount) query;
  admin_disable_evm : (bool) -> (Result);
  admin_ic_permissions_add : (principal, vec Permission) -> (Result_1);
  admin_ic_permissions_get : (principal) -> (Result_1) query;
  admin_ic_permissions_remove : (principal, vec Permission) -> (Result_1);
  admin_reserve_stable_storage_pages : (nat64) -> (Result);
  admin_set_block_gas_limit : (nat64) -> (Result);
  admin_set_block_size_limit : (nat64) -> (Result);
  admin_set_blockchain_size_limit : (BlockchainStorageLimits) -> (Result);
  admin_set_coinbase : (text) -> (Result);
  admin_set_evm_state_history_size : (nat64) -> (Result);
  admin_set_max_batch_requests : (nat32) -> (Result);
  admin_set_max_tx_pool_size : (nat64) -> (Result);
  admin_set_min_gas_price : (text) -> (Result);
  admin_set_panic_transaction_from : (opt text) -> (Result);
  append_blockchain_blocks : (
      vec record { Block; vec record { Transaction; ExeResult } },
    ) -> (Result);
  apply_clear_info_changes : (vec StateUpdateAction) -> (Result);
  apply_state_storage_changes : (vec StateUpdateAction_1) -> (Result);
  eth_accounts : () -> (vec text) query;
  eth_block_number : () -> (nat64) query;
  eth_call : (opt text, opt text, opt text, nat64, opt text, opt text) -> (
      Result_2,
    ) query;
  eth_chain_id : () -> (nat64) query;
  eth_estimate_gas : (EstimateGasRequest) -> (Result_3) query;
  eth_fee_history : (nat64, text, opt vec float64) -> (Result_4) query;
  eth_gas_price : () -> (Result_3) query;
  eth_get_balance : (text, text) -> (Result_3) query;
  eth_get_block_by_hash : (text, bool) -> (Result_5) query;
  eth_get_block_by_number : (text, bool) -> (Result_5) query;
  eth_get_block_transaction_count_by_block_number : (text) -> (Result_6) query;
  eth_get_block_transaction_count_by_hash : (text) -> (nat64) query;
  eth_get_block_transaction_count_by_number : (text) -> (Result_6) query;
  eth_get_blocks_by_number : (text, text, bool) -> (Result_7) query;
  eth_get_code : (text, text) -> (Result_3) query;
  eth_get_storage_at : (text, text, text) -> (Result_3) query;
  eth_get_transaction_by_block_hash_and_index : (text, nat64) -> (
      opt Transaction,
    ) query;
  eth_get_transaction_by_block_number_and_index : (text, nat64) -> (
      Result_8,
    ) query;
  eth_get_transaction_by_hash : (text) -> (opt Transaction) query;
  eth_get_transaction_count : (text, text) -> (Result_3) query;
  eth_get_transaction_receipt : (text) -> (Result_9) query;
  eth_hashrate : () -> (nat64) query;
  eth_max_priority_fee_per_gas : () -> (Result_3) query;
  eth_mining : () -> (bool) query;
  eth_protocol_version : () -> (nat64) query;
  eth_syncing : () -> (bool) query;
  get_block_gas_limit : () -> (nat64) query;
  get_block_size_limit : () -> (nat64) query;
  get_blockchain_size_limit : () -> (BlockchainStorageLimits) query;
  get_canister_build_data : () -> (BuildData) query;
  get_clear_info_entries : (opt record { nat64; text }, nat32) -> (
      Result_10,
    ) query;
  get_evm_state_history_size : () -> (nat64) query;
  get_genesis_accounts : () -> (vec record { text; text }) query;
  get_max_batch_requests : () -> (nat32) query;
  get_max_tx_pool_size : () -> (nat64) query;
  get_min_gas_price : () -> (text) query;
  get_state_storage_item_hashes : (opt text, nat32) -> (Result_11) query;
  get_tx_execution_result_by_hash : (text) -> (
      opt StorableExecutionResult,
    ) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_update : (HttpRequest) -> (HttpResponse);
  ic_logs : (nat64, nat64) -> (Result_12) query;
  ic_stats : () -> (Result_13) query;
  is_address_reserved : (principal, text) -> (bool) query;
  is_evm_disabled : () -> (bool) query;
  mint_native_tokens : (text, text) -> (Result_14);
  net_listening : () -> (bool) query;
  net_peer_count : () -> (nat64) query;
  net_version : () -> (nat64) query;
  reserve_address : (principal, text) -> (Result);
  revert_blockchain_to_block : (nat64) -> (Result_15);
  send_raw_transaction : (Transaction) -> (Result_3);
  set_logger_filter : (text) -> (Result);
  set_state_root : (text) -> (Result);
  set_storage_indices : (Indices) -> (Result);
  web3_client_version : () -> (text) query;
  web3_sha3 : (text) -> (Result_3) query;
}
